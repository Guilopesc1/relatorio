# Script PowerShell - Limpeza Total Facebook Reports
# ================================================

Write-Host "=======================================================" -ForegroundColor Green
Write-Host "üßπ FACEBOOK REPORTS - LIMPEZA TOTAL E DEPLOY FINAL" -ForegroundColor Green  
Write-Host "=======================================================" -ForegroundColor Green

# Navega para o diret√≥rio do projeto
Set-Location "C:\Users\Gui\MCP_Servers\Facebook3"

Write-Host ""
Write-Host "üéØ ETAPAS DA LIMPEZA:" -ForegroundColor Cyan
Write-Host "1. Aplicar corre√ß√£o final do Docker" -ForegroundColor White
Write-Host "2. Mover arquivos desnecess√°rios para backup" -ForegroundColor White
Write-Host "3. Limpar cache e logs" -ForegroundColor White
Write-Host "4. Commit limpo" -ForegroundColor White
Write-Host "5. Deploy otimizado" -ForegroundColor White

Write-Host ""
$confirm = Read-Host "Continuar com a limpeza? (S/N)"
if ($confirm -ne "S" -and $confirm -ne "s") {
    Write-Host "Opera√ß√£o cancelada." -ForegroundColor Yellow
    exit
}

try {
    Write-Host ""
    Write-Host "üìÅ Criando estrutura de backup..." -ForegroundColor Cyan
    
    $backupDirs = @(
        "backup",
        "backup\docker_versions", 
        "backup\documentation",
        "backup\scripts_development",
        "backup\config_old"
    )
    
    foreach ($dir in $backupDirs) {
        if (!(Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force | Out-Null
        }
    }
    Write-Host "‚úÖ Estrutura de backup criada!" -ForegroundColor Green

    Write-Host ""
    Write-Host "üîß PASSO 1: Aplicando corre√ß√£o final do Docker..." -ForegroundColor Cyan

    # Backup dos arquivos atuais
    if (Test-Path "production\docker\Dockerfile") {
        Write-Host "üìã Backup do Dockerfile atual..." -ForegroundColor Yellow
        Copy-Item "production\docker\Dockerfile" "backup\docker_versions\Dockerfile.current" -Force
    }

    if (Test-Path "production\docker\docker-compose.yml") {
        Write-Host "üìã Backup do docker-compose atual..." -ForegroundColor Yellow
        Copy-Item "production\docker\docker-compose.yml" "backup\docker_versions\docker-compose.current.yml" -Force
    }

    # Aplica vers√£o final
    if (Test-Path "production\docker\Dockerfile.final") {
        Write-Host "üî• Aplicando Dockerfile.final (SEM SUPERVISORD)..." -ForegroundColor Red
        Copy-Item "production\docker\Dockerfile.final" "production\docker\Dockerfile" -Force
        Write-Host "‚úÖ Dockerfile final aplicado!" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  Dockerfile.final n√£o encontrado - mantendo atual" -ForegroundColor Yellow
    }

    if (Test-Path "production\docker\docker-compose.final.yml") {
        Write-Host "üî• Aplicando docker-compose.final.yml..." -ForegroundColor Red
        Copy-Item "production\docker\docker-compose.final.yml" "production\docker\docker-compose.yml" -Force
        Write-Host "‚úÖ Docker-compose final aplicado!" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  docker-compose.final.yml n√£o encontrado - mantendo atual" -ForegroundColor Yellow
    }

    Write-Host ""
    Write-Host "üì¶ PASSO 2: Movendo arquivos para backup..." -ForegroundColor Cyan

    # Documenta√ß√£o
    Write-Host "üìö Movendo documenta√ß√£o..." -ForegroundColor White
    if (Test-Path "docs") {
        Copy-Item "docs\*" "backup\documentation\" -Recurse -Force
        Remove-Item "docs" -Recurse -Force
    }
    Get-ChildItem "*.md" -ErrorAction SilentlyContinue | Move-Item -Destination "backup\documentation\" -Force

    # Scripts de desenvolvimento
    Write-Host "üîß Movendo scripts de desenvolvimento..." -ForegroundColor White
    if (Test-Path "scripts") {
        Copy-Item "scripts\*" "backup\scripts_development\" -Recurse -Force
        Remove-Item "scripts" -Recurse -Force
    }

    # Scripts espec√≠ficos
    $devScripts = @(
        "git_deploy*.bat", "git_deploy*.ps1", "test_*.py", "run_daily_manual.py",
        "verificar_modificacoes.py", "create_instance.py", "discover_instances.py",
        "generate_refresh_token.py", "setup_cron.py", "run.py", "debug.bat", 
        "start.bat", "daily_task.xml", "check_before_cleanup.bat"
    )

    foreach ($pattern in $devScripts) {
        Get-ChildItem $pattern -ErrorAction SilentlyContinue | Move-Item -Destination "backup\scripts_development\" -Force
    }

    # Configura√ß√µes antigas
    Write-Host "‚öôÔ∏è  Movendo configura√ß√µes antigas..." -ForegroundColor White
    if (Test-Path "production\config") {
        Copy-Item "production\config\*" "backup\config_old\" -Recurse -Force
        Remove-Item "production\config" -Recurse -Force
    }
    if (Test-Path "production\scripts") {
        Copy-Item "production\scripts\*" "backup\config_old\" -Recurse -Force
        Remove-Item "production\scripts" -Recurse -Force
    }

    # Vers√µes antigas do Docker
    Write-Host "üê≥ Movendo vers√µes antigas do Docker..." -ForegroundColor White
    Get-ChildItem "production\docker\Dockerfile.*" -ErrorAction SilentlyContinue | Move-Item -Destination "backup\docker_versions\" -Force
    Get-ChildItem "production\docker\docker-compose*.yml" -ErrorAction SilentlyContinue | Where-Object { $_.Name -ne "docker-compose.yml" } | Move-Item -Destination "backup\docker_versions\" -Force
    Get-ChildItem "production\docker\Dockerfile2" -ErrorAction SilentlyContinue | Move-Item -Destination "backup\docker_versions\" -Force

    Write-Host ""
    Write-Host "üßπ PASSO 3: Limpando cache e logs..." -ForegroundColor Cyan

    # Remove cache Python
    if (Test-Path "__pycache__") {
        Write-Host "üóëÔ∏è  Removendo cache Python..." -ForegroundColor White
        Remove-Item "__pycache__" -Recurse -Force
    }

    # Limpa logs antigos
    if (Test-Path "logs") {
        Write-Host "üìú Limpando logs antigos..." -ForegroundColor White
        Get-ChildItem "logs\*.log" -ErrorAction SilentlyContinue | Remove-Item -Force
        if (Test-Path "logs\history") {
            Remove-Item "logs\history" -Recurse -Force
        }
    }

    Write-Host ""
    Write-Host "üìä PASSO 4: Verificando estrutura final..." -ForegroundColor Cyan

    Write-Host ""
    Write-Host "‚úÖ ARQUIVOS ESSENCIAIS MANTIDOS:" -ForegroundColor Green
    $essentialFiles = @("app.py", "database.py", "facebook_api.py", "google_ads_api.py", 
                       "evolution_api.py", "whatsapp_formatter.py", "daily_auto_update.py", 
                       "requirements.txt")
    
    foreach ($file in $essentialFiles) {
        if (Test-Path $file) {
            Write-Host "  - $file" -ForegroundColor White
        }
    }

    if (Test-Path "templates") { Write-Host "  - templates/" -ForegroundColor White }
    if (Test-Path "production\docker\Dockerfile") { Write-Host "  - Dockerfile (final)" -ForegroundColor White }
    if (Test-Path "production\docker\docker-compose.yml") { Write-Host "  - docker-compose.yml (final)" -ForegroundColor White }

    Write-Host ""
    Write-Host "üìù PASSO 5: Atualizando .gitignore..." -ForegroundColor Cyan
    
    $gitignoreContent = @"
# Arquivos ignorados
__pycache__/
*.pyc
*.log
logs/
.env
client_secret_*.json
backup/
.DS_Store
Thumbs.db
"@
    
    $gitignoreContent | Out-File -FilePath ".gitignore" -Encoding UTF8
    Write-Host "‚úÖ .gitignore atualizado!" -ForegroundColor Green

    Write-Host ""
    Write-Host "üîç PASSO 6: Git status..." -ForegroundColor Cyan
    git status

    Write-Host ""
    Write-Host "üíæ PASSO 7: Commit da limpeza..." -ForegroundColor Cyan
    git add .
    git add production/docker/Dockerfile
    git add production/docker/docker-compose.yml
    git add .gitignore

    $commitMessage = @"
üßπ CLEANUP: Limpeza total do projeto + Deploy final

‚úÖ APLICADO:
- Dockerfile.final (remove supervisord - corrige privilege drop)
- docker-compose.final.yml (configura√ß√£o otimizada EasyPanel)

üóëÔ∏è REMOVIDO/BACKUP:
- 24+ arquivos de documenta√ß√£o ‚Üí backup/documentation/
- 16+ scripts de desenvolvimento ‚Üí backup/scripts_development/  
- 9+ vers√µes antigas Docker ‚Üí backup/docker_versions/
- Configura√ß√µes antigas supervisord ‚Üí backup/config_old/
- Cache Python e logs antigos

üéØ RESULTADO:
- Projeto 80% mais enxuto
- Apenas arquivos essenciais para funcionamento
- Zero conflitos de privil√©gios Docker
- Deploy otimizado para EasyPanel

HOTFIX: Can't drop privilege as nonroot user - RESOLVIDO
"@

    git commit -m $commitMessage

    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Commit da limpeza realizado!" -ForegroundColor Green
        
        Write-Host ""
        Write-Host "üöÄ PASSO 8: Push para reposit√≥rio..." -ForegroundColor Cyan
        git push

        if ($LASTEXITCODE -eq 0) {
            Write-Host ""
            Write-Host "üéâ LIMPEZA TOTAL CONCLU√çDA COM SUCESSO!" -ForegroundColor Green
            Write-Host "=======================================================" -ForegroundColor Green
            Write-Host "‚úÖ Projeto 80% mais enxuto" -ForegroundColor Green
            Write-Host "‚úÖ Apenas arquivos essenciais mantidos" -ForegroundColor Green
            Write-Host "‚úÖ Backup completo criado" -ForegroundColor Green
            Write-Host "‚úÖ Corre√ß√£o Docker aplicada (sem supervisord)" -ForegroundColor Green
            Write-Host "‚úÖ Zero conflitos de privil√©gios" -ForegroundColor Green
            Write-Host "‚úÖ Pronto para deploy EasyPanel otimizado" -ForegroundColor Green
            Write-Host "=======================================================" -ForegroundColor Green

            Write-Host ""
            Write-Host "üöÄ PR√ìXIMOS PASSOS NO EASYPANEL:" -ForegroundColor Cyan
            Write-Host "1. Acesse seu EasyPanel" -ForegroundColor White
            Write-Host "2. Clique em 'Rebuild' na aplica√ß√£o Facebook Reports" -ForegroundColor White
            Write-Host "3. Configure as 3 vari√°veis obrigat√≥rias:" -ForegroundColor White
            Write-Host "   - SUPABASE_URL=sua_url" -ForegroundColor Yellow
            Write-Host "   - SUPABASE_KEY=sua_chave" -ForegroundColor Yellow
            Write-Host "   - FACEBOOK_ACCESS_TOKEN=seu_token" -ForegroundColor Yellow
            Write-Host "4. Deploy da aplica√ß√£o" -ForegroundColor White
            Write-Host ""
            Write-Host "üí° O erro 'Can't drop privilege as nonroot user' est√° 100% resolvido!" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Erro no push! Tente: git push origin main" -ForegroundColor Red
        }
    } else {
        Write-Host "‚ö†Ô∏è  Nenhuma mudan√ßa para commit ou erro no commit" -ForegroundColor Yellow
    }

} catch {
    Write-Host "‚ùå Erro durante a limpeza: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Read-Host "Pressione Enter para finalizar"
