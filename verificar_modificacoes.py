"""
Script de Verifica√ß√£o das Modifica√ß√µes
Verifica se todas as mudan√ßas foram implementadas corretamente
"""

import os
import sys

def check_file_modifications():
    """Verifica se os arquivos foram modificados corretamente"""
    
    print("üîç VERIFICA√á√ÉO DAS MODIFICA√á√ïES")
    print("=" * 50)
    
    base_path = os.path.dirname(os.path.abspath(__file__))
    
    # Lista de verifica√ß√µes
    checks = []
    
    # 1. Verificar database.py
    database_path = os.path.join(base_path, 'database.py')
    if os.path.exists(database_path):
        with open(database_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Verifica se os novos m√©todos foram adicionados
        has_by_id = 'get_client_link_grupo_by_id' in content
        has_by_name = 'get_client_link_grupo_by_name' in content
        has_link_grupo_select = "select('link_grupo')" in content
        
        checks.append({
            'file': 'database.py',
            'checks': [
                ('‚úÖ' if has_by_id else '‚ùå', 'get_client_link_grupo_by_id() m√©todo'),
                ('‚úÖ' if has_by_name else '‚ùå', 'get_client_link_grupo_by_name() m√©todo'),
                ('‚úÖ' if has_link_grupo_select else '‚ùå', 'Busca por campo link_grupo')
            ]
        })
    else:
        checks.append({
            'file': 'database.py',
            'checks': [('‚ùå', 'Arquivo n√£o encontrado')]
        })
    
    # 2. Verificar app.py
    app_path = os.path.join(base_path, 'app.py')
    if os.path.exists(app_path):
        with open(app_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Verifica se as modifica√ß√µes foram feitas
        no_fixed_number = '48999319622' not in content or 'N√∫mero fixo' not in content
        has_link_grupo_fetch = 'get_client_link_grupo_by_id' in content
        has_validation = 'n√£o configurado para o cliente' in content
        has_logs = '[WHATSAPP]' in content
        
        checks.append({
            'file': 'app.py',
            'checks': [
                ('‚úÖ' if no_fixed_number else '‚ùå', 'N√∫mero fixo removido'),
                ('‚úÖ' if has_link_grupo_fetch else '‚ùå', 'Busca link_grupo implementada'),
                ('‚úÖ' if has_validation else '‚ùå', 'Valida√ß√£o de cliente configurado'),
                ('‚úÖ' if has_logs else '‚ùå', 'Logs informativos adicionados')
            ]
        })
    else:
        checks.append({
            'file': 'app.py',
            'checks': [('‚ùå', 'Arquivo n√£o encontrado')]
        })
    
    # 3. Verificar arquivos de documenta√ß√£o
    doc_files = [
        'MODIFICACOES_WHATSAPP.md',
        'test_whatsapp_update.py',
        'MODIFICACOES_WHATSAPP.py'
    ]
    
    for doc_file in doc_files:
        doc_path = os.path.join(base_path, doc_file)
        exists = os.path.exists(doc_path)
        checks.append({
            'file': doc_file,
            'checks': [('‚úÖ' if exists else '‚ùå', 'Arquivo criado')]
        })
    
    # Exibir resultados
    for check in checks:
        print(f"\nüìÑ {check['file']}:")
        for status, description in check['checks']:
            print(f"   {status} {description}")
    
    # Resumo
    total_checks = sum(len(check['checks']) for check in checks)
    passed_checks = sum(1 for check in checks for status, _ in check['checks'] if status == '‚úÖ')
    
    print(f"\nüìä RESUMO:")
    print(f"   Total de verifica√ß√µes: {total_checks}")
    print(f"   Aprovadas: {passed_checks}")
    print(f"   Falharam: {total_checks - passed_checks}")
    
    if passed_checks == total_checks:
        print(f"\nüéâ TODAS AS MODIFICA√á√ïES FORAM IMPLEMENTADAS COM SUCESSO!")
        return True
    else:
        print(f"\n‚ö†Ô∏è  Algumas verifica√ß√µes falharam. Verifique os arquivos marcados com ‚ùå")
        return False

def show_next_steps():
    """Mostra pr√≥ximos passos"""
    print(f"\nüìã PR√ìXIMOS PASSOS:")
    print("1. ‚úÖ Certifique-se que o campo 'link_grupo' existe na tabela 'relatorio_cadastro_clientes'")
    print("2. ‚úÖ Preencha o 'link_grupo' para todos os clientes ativos")
    print("3. ‚úÖ Teste o sistema com alguns envios")
    print("4. ‚úÖ Monitore os logs para verificar funcionamento")
    
    print(f"\nüóÇÔ∏è  ESTRUTURA DE DADOS NECESS√ÅRIA:")
    print("   Tabela: relatorio_cadastro_clientes")
    print("   Campos obrigat√≥rios:")
    print("   - id (int): ID do cliente")
    print("   - name (string): Nome do cliente") 
    print("   - link_grupo (string): N√∫mero WhatsApp para envio")
    print("   - roda_facebook (bool): Se cliente est√° ativo no Facebook")
    
    print(f"\nüìû FORMATO DO N√öMERO:")
    print("   - Brasileiro: 5548999999999")
    print("   - Internacional: +5548999999999")
    print("   - Sistema formatar√° automaticamente")

def main():
    """Fun√ß√£o principal"""
    print("üîß SCRIPT DE VERIFICA√á√ÉO - MODIFICA√á√ïES WHATSAPP")
    print("Sistema: Facebook Reports")
    print("Data: Julho 2025")
    print()
    
    success = check_file_modifications()
    
    if success:
        show_next_steps()
        
        print(f"\n‚ú® SISTEMA ATUALIZADO COM SUCESSO!")
        print("As mensagens agora ser√£o enviadas para o n√∫mero espec√≠fico de cada cliente.")
        
    else:
        print(f"\nüö® ATEN√á√ÉO: Algumas modifica√ß√µes podem n√£o ter sido aplicadas corretamente.")
        print("Verifique os arquivos e tente novamente.")
    
    print(f"\nüìö Para mais informa√ß√µes, consulte:")
    print("   - MODIFICACOES_WHATSAPP.md (documenta√ß√£o completa)")
    print("   - test_whatsapp_update.py (script de teste)")

if __name__ == "__main__":
    main()
