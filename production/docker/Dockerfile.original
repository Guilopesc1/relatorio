# Dockerfile para Facebook Reports System - Produção
FROM python:3.11-slim

# Metadata
LABEL maintainer="Facebook Reports System"
LABEL version="1.0.0"
LABEL description="Sistema de coleta automatizada Facebook/Google Ads"

# Variáveis de ambiente de sistema
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Cria usuário não-root para segurança
RUN groupadd -r appuser && useradd -r -g appuser -m -d /app -s /bin/bash appuser

# Instala dependências do sistema
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    curl \
    cron \
    supervisor \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Define diretório de trabalho
WORKDIR /app

# Copia requirements primeiro (para cache do Docker)
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Cria estrutura de diretórios
RUN mkdir -p /app/logs /app/logs/history /app/data /app/config \
    && chown -R appuser:appuser /app

# Copia código da aplicação
COPY --chown=appuser:appuser . .

# Copia arquivos de configuração
COPY production/config/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY production/scripts/entrypoint.sh /entrypoint.sh
COPY production/scripts/healthcheck.sh /healthcheck.sh

# Define permissões
RUN chmod +x /entrypoint.sh /healthcheck.sh

# Configura cron para appuser
RUN echo "0 6 * * * cd /app && python daily_auto_update.py >> /app/logs/daily_update.log 2>&1" > /tmp/appuser_cron \
    && chown appuser:appuser /tmp/appuser_cron

# Expõe porta da aplicação web
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /healthcheck.sh

# Entrypoint (como root para configurar cron)
ENTRYPOINT ["/entrypoint.sh"]
CMD ["supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
